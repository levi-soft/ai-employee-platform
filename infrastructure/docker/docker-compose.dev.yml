
# Development Docker Compose with hot reload and debugging capabilities
version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: ai_platform_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_employee_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_employee_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_platform_dev

  redis:
    image: redis:7-alpine
    container_name: ai_platform_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_platform_dev

  # Backend Services (Development mode with hot reload)
  auth-service:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_auth_dev
    restart: unless-stopped
    ports:
      - "3001:3000"
      - "9001:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret_key
      - PORT=3000
    volumes:
      - ../../services/auth-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  ai-routing-service:
    build:
      context: ../../services/ai-routing-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_ai_routing_dev
    restart: unless-stopped
    ports:
      - "3002:3000"
      - "9002:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ../../services/ai-routing-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  billing-service:
    build:
      context: ../../services/billing-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_billing_dev
    restart: unless-stopped
    ports:
      - "3003:3000"
      - "9003:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ../../services/billing-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  user-management-service:
    build:
      context: ../../services/user-management-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_user_mgmt_dev
    restart: unless-stopped
    ports:
      - "3004:3000"
      - "9004:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ../../services/user-management-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  plugin-manager-service:
    build:
      context: ../../services/plugin-manager-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_plugin_mgr_dev
    restart: unless-stopped
    ports:
      - "3005:3000"
      - "9005:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ../../services/plugin-manager-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  notification-service:
    build:
      context: ../../services/notification-service
      dockerfile: Dockerfile.dev
    container_name: ai_platform_notification_dev
    restart: unless-stopped
    ports:
      - "3006:3000"
      - "9006:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_employee_platform
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ../../services/notification-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend Applications (Development mode with hot reload)
  admin-dashboard:
    build:
      context: ../../apps/admin-dashboard
      dockerfile: Dockerfile.dev
    container_name: ai_platform_admin_dashboard_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ../../apps/admin-dashboard:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  employee-portal:
    build:
      context: ../../apps/employee-portal
      dockerfile: Dockerfile.dev
    container_name: ai_platform_employee_portal_dev
    restart: unless-stopped
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ../../apps/employee-portal:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # API Gateway
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ai_platform_nginx_dev
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - auth-service
      - ai-routing-service
      - billing-service
      - user-management-service
      - plugin-manager-service
      - notification-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai_platform_dev
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  ai_platform_dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
