
# AI Employee Platform - Production Nginx Configuration
# API Gateway with Load Balancing, Rate Limiting, SSL, and Security

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Real IP detection (for load balancer/CDN)
    real_ip_header X-Real-IP;
    real_ip_recursive on;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;

    # Upstream services with load balancing and health checks
    upstream auth_service {
        least_conn;
        server auth-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream ai_routing_service {
        least_conn;
        server ai-routing-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream billing_service {
        least_conn;
        server billing-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream user_management_service {
        least_conn;
        server user-management-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream plugin_manager_service {
        least_conn;
        server plugin-manager-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream notification_service {
        least_conn;
        server notification-service:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream admin_dashboard {
        least_conn;
        server admin-dashboard:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream employee_portal {
        least_conn;
        server employee-portal:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate limiting zones - 100 requests per minute per user as required
    limit_req_zone $binary_remote_addr zone=api_general:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=api_auth:10m rate=50r/m;
    limit_req_zone $binary_remote_addr zone=api_ai:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=api_strict:10m rate=10r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Request size limiting
    limit_req_zone $binary_remote_addr zone=req_size:10m rate=1r/s;

    # Advanced logging format with performance metrics
    map $request_time $request_time_class {
        ~^0\.(0[0-4])  fast;
        ~^0\.(0[5-9])  medium;
        ~^[0-9]\.      slow;
        default        very_slow;
    }

    log_format gateway_log '{'
                          '"timestamp":"$time_iso8601",'
                          '"client_ip":"$remote_addr",'
                          '"method":"$request_method",'
                          '"uri":"$request_uri",'
                          '"status":$status,'
                          '"bytes_sent":$bytes_sent,'
                          '"referer":"$http_referer",'
                          '"user_agent":"$http_user_agent",'
                          '"x_forwarded_for":"$http_x_forwarded_for",'
                          '"upstream_addr":"$upstream_addr",'
                          '"upstream_status":"$upstream_status",'
                          '"request_time":$request_time,'
                          '"upstream_response_time":"$upstream_response_time",'
                          '"upstream_connect_time":"$upstream_connect_time",'
                          '"upstream_header_time":"$upstream_header_time",'
                          '"response_class":"$request_time_class",'
                          '"scheme":"$scheme",'
                          '"host":"$host"'
                          '}';

    access_log /var/log/nginx/gateway_access.log gateway_log buffer=16k flush=5s;
    error_log /var/log/nginx/gateway_error.log warn;

    # Security headers map
    map $sent_http_content_type $security_headers_csp {
        ~*text/(html|javascript)|application/javascript "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; worker-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';";
        default "";
    }

    # Rate limit status
    map $limit_req $limit_req_status {
        PASSED 0;
        DELAYED 1;
        REJECTED 2;
        DELAYED_DRY_RUN 3;
        REJECTED_DRY_RUN 4;
    }

    # SSL Configuration (production ready)
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Default server for unknown hosts (security)
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        return 444;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name ai-employee-platform.local localhost;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Health check (HTTP only)
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            return 200 "Gateway healthy - HTTP\n";
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name ai-employee-platform.local localhost;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        add_header Content-Security-Policy $security_headers_csp always;

        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # CORS configuration with preflight handling
        location / {
            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$http_origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-CSRF-Token' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                add_header 'Content-Type' 'text/plain charset=UTF-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            
            # CORS headers for actual requests
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,X-Total-Count' always;
            
            # Default 404 for unmatched routes
            return 404 '{"error":"Endpoint not found","code":"ROUTE_NOT_FOUND","timestamp":"$time_iso8601"}';
        }

        # Enhanced health check endpoint with detailed status
        location = /health {
            access_log off;
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            return 200 '{"status":"healthy","service":"api-gateway","version":"1.0.0","timestamp":"$time_iso8601","ssl":true,"upstreams":{"auth":"available","ai":"available","billing":"available","users":"available","plugins":"available","notifications":"available"}}';
        }

        # Metrics endpoint (internal use)
        location = /metrics {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            add_header Content-Type text/plain;
            return 200 "# Gateway metrics endpoint - implement with nginx-module-vts if needed\n";
        }

        # Admin Dashboard (Frontend)
        location /admin {
            limit_req zone=api_general burst=20 nodelay;
            
            proxy_pass http://admin_dashboard;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_buffering off;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Employee Portal (Frontend)
        location /portal {
            limit_req zone=api_general burst=20 nodelay;
            
            proxy_pass http://employee_portal;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_buffering off;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Authentication service routes
        location /api/auth {
            limit_req zone=api_auth burst=10 nodelay;
            
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Enhanced timeout for auth operations
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Auth-specific headers
            proxy_set_header X-Auth-Request-User $remote_user;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # AI routing service routes (extended timeouts for AI processing)
        location /api/ai {
            limit_req zone=api_ai burst=5 nodelay;
            
            proxy_pass http://ai_routing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Extended timeouts for AI processing
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 300s;
            
            # Support for streaming responses
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            
            # AI-specific headers
            proxy_set_header X-AI-Request-ID $request_id;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # Billing service routes
        location /api/billing {
            limit_req zone=api_general burst=10 nodelay;
            
            proxy_pass http://billing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_connect_timeout 15s;
            proxy_send_timeout 15s;
            proxy_read_timeout 60s;
            
            # Billing-specific headers
            proxy_set_header X-Billing-Request-ID $request_id;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # User management service routes
        location /api/users {
            limit_req zone=api_general burst=15 nodelay;
            
            proxy_pass http://user_management_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_connect_timeout 15s;
            proxy_send_timeout 15s;
            proxy_read_timeout 45s;
            
            # User management headers
            proxy_set_header X-User-Request-ID $request_id;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # Plugin manager service routes
        location /api/plugins {
            limit_req zone=api_strict burst=5 nodelay;
            
            proxy_pass http://plugin_manager_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 120s;
            
            # Plugin-specific headers
            proxy_set_header X-Plugin-Request-ID $request_id;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # Notification service routes (WebSocket support)
        location /api/notifications {
            limit_req zone=api_general burst=10 nodelay;
            
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # WebSocket timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s; # 1 hour for long-lived connections
            
            # Disable buffering for real-time communication
            proxy_buffering off;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /api_error;
        }

        # API error page
        location = /api_error {
            internal;
            add_header Content-Type application/json;
            return 502 '{"error":"Service temporarily unavailable","code":"SERVICE_UNAVAILABLE","timestamp":"$time_iso8601","request_id":"$request_id"}';
        }

        # File uploads (with size limits)
        location /api/upload {
            limit_req zone=req_size burst=3 nodelay;
            client_max_body_size 100m;
            client_body_timeout 60s;
            
            # Route to appropriate service based on upload type
            location ~ ^/api/upload/(users|profiles) {
                proxy_pass http://user_management_service;
            }
            
            location ~ ^/api/upload/plugins {
                proxy_pass http://plugin_manager_service;
            }
            
            # Default upload handler
            proxy_pass http://user_management_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
    }
}
