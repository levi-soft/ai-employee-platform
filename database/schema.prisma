generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  role        Role     @default(EMPLOYEE)
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  avatarUrl   String?  @map("avatar_url")
  language    String   @default("vi")
  timezone    String   @default("Asia/Ho_Chi_Minh")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  creditAccount CreditAccount?
  transactions  Transaction[]
  aiRequests    AIRequest[]
  userPlugins   UserPlugin[]
  budgetLimits  BudgetLimit[]

  @@map("users")
}

model CreditAccount {
  id            String  @id @default(cuid())
  userId        String  @unique @map("user_id")
  balance       Decimal @default(0.00) @db.Decimal(10, 2)
  totalSpent    Decimal @default(0.00) @map("total_spent") @db.Decimal(10, 2)
  totalToppedUp Decimal @default(0.00) @map("total_topped_up") @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_accounts")
}

model AIAgent {
  id              String   @id @default(cuid())
  name            String
  provider        String
  model           String
  capabilities    String[]
  costPerToken    Decimal  @map("cost_per_token") @db.Decimal(8, 6)
  maxTokens       Int?     @map("max_tokens")
  responseTimeAvg Int?     @map("response_time_avg")
  accuracyScore   Decimal? @map("accuracy_score") @db.Decimal(3, 2)
  isActive        Boolean  @default(true) @map("is_active")
  config          Json?
  createdAt       DateTime @default(now()) @map("created_at")

  aiRequests   AIRequest[]
  transactions Transaction[]

  @@map("ai_agents")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum TransactionType {
  TOPUP
  USAGE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  type          TransactionType
  amount        Decimal           @db.Decimal(10, 2)
  description   String?
  aiAgentId     String?           @map("ai_agent_id")
  tokensUsed    Int?              @map("tokens_used")
  paymentMethod String?           @map("payment_method")
  paymentId     String?           @map("payment_id")
  status        TransactionStatus @default(COMPLETED)
  metadata      Json?
  createdAt     DateTime          @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  aiAgent AIAgent? @relation(fields: [aiAgentId], references: [id])

  @@map("transactions")
}

model AIRequest {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  aiAgentId    String    @map("ai_agent_id")
  inputText    String    @map("input_text")
  outputText   String?   @map("output_text")
  tokensUsed   Int?      @map("tokens_used")
  cost         Decimal?  @db.Decimal(8, 4)
  responseTime Int?      @map("response_time")
  status       String    @default("pending")
  errorMessage String?   @map("error_message")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  completedAt  DateTime? @map("completed_at")

  user    User    @relation(fields: [userId], references: [id])
  aiAgent AIAgent @relation(fields: [aiAgentId], references: [id])

  @@map("ai_requests")
}

model Plugin {
  id           String   @id @default(cuid())
  name         String
  version      String
  author       String?
  description  String?
  category     String?
  isOfficial   Boolean  @default(false) @map("is_official")
  isActive     Boolean  @default(true) @map("is_active")
  configSchema Json?    @map("config_schema")
  manifest     Json?
  createdAt    DateTime @default(now()) @map("created_at")

  userPlugins UserPlugin[]

  @@map("plugins")
}

model UserPlugin {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  pluginId    String   @map("plugin_id")
  config      Json?
  isEnabled   Boolean  @default(true) @map("is_enabled")
  installedAt DateTime @default(now()) @map("installed_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([userId, pluginId])
  @@map("user_plugins")
}

model BudgetLimit {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  limitType    String   @map("limit_type")
  amount       Decimal  @db.Decimal(10, 2)
  currentSpent Decimal  @default(0.00) @map("current_spent") @db.Decimal(10, 2)
  resetDate    DateTime? @map("reset_date")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budget_limits")
}
